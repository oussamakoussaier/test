pipeline {
    agent any
         environment {
        NVD_API_KEY = '0bfb1a0f-8c1c-4c46-8dbf-fed7c645828d'  
            }
        stages {
            stage('Git Checkout and Secrets Scan') {
                steps {
                    sh 'docker pull gesellix/trufflehog'
                    sh 'docker run -t gesellix/trufflehog --json https://github.com/oussamakoussaier/test.git > trufflehog'
                  }
        }
            stage('Dependency Check') {
                steps {
                dependencyCheck additionalArguments: '--format HTML --nvdApiKey $NVD_API_KEY', odcInstallation: 'DP-check'
            }
        }
            stage('Integration Testing and DAST with OWASP ZAP') {
                steps {
                    script {
                        sh 'docker run -d -p 8080:8080 --name zaproxy --network mynetwork zaproxy/zap-stable zap.sh -daemon -port 8080 -config api.disablekey=true'
            
                        sleep 30
            
                        sh """
                        curl -X POST http://localhost:8080/JSON/ascan/action/scan \
                        -d 'url=https://github.com/oussamakoussaier/test.git' \
                        -d 'recurse=true' \
                        -d 'inScopeOnly=false' \
                        -d 'scanContext=default'
                        """
            
                        sh 'mvn verify -DskipUnitTests'

                        sh 'docker stop zaproxy'

                    }
                }
            }
            stage('Static Code Analysis') {
                steps {
                    script {
                        withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                        sh 'mvn clean package sonar:sonar'
                            }
                        }
                    }
                }
            stage('Quality Gate Status') {
                steps {
                    script {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-api-key'
                    }
                }
            }
            stage('Upload War File to Nexus') {
                steps {
                    script {
                        //def readPomVersion = readMavenPom file: 'pom.xml'
                        //def nexusRepo = readPomVersion.version.endsWith('SNAPSHOT') ? "demoapp-snapshot" : "demoapp-release"
                        nexusArtifactUploader artifacts: [
                            [artifactId: 'tp-foyer',
                             classifier: '', 
                             file: 'target/tp-foyer-5.0.0.jar',
                             type: 'jar']
                        ],
                        credentialsId: 'nexus-auth',
                        groupId: 'tn.esprit',
                        nexusUrl: '192.168.33.10:8081',
                        nexusVersion: 'nexus3', 
                        protocol: 'http',
                        repository: nexusRepo,
                        version: '1.0'
                    }
                }
            }
            stage('Docker Image Build and Security Scan') {
                steps {
                    script {
                        // Build the Docker image
                        sh "docker build -t $JOB_NAME:v1.$BUILD_ID ."
            // Run Trivy container security scan
                        sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy --exit-code 1 --no-progress --severity HIGH,CRITICAL $JOB_NAME:v1.$BUILD_ID'
            // Tag the Docker image
                        sh "docker tag $JOB_NAME:v1.$BUILD_ID mohamedoussama.koussaiet@esprit.tn/$JOB_NAME:v1.$BUILD_ID"
                        sh "docker tag $JOB_NAME:v1.$BUILD_ID mohamedoussama.koussaiet@esprit.tn/$JOB_NAME:latest"
                    }
                }
            }


    }
}
